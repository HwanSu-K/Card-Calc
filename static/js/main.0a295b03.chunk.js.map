{"version":3,"sources":["App.js","index.js"],"names":["Text","Typography","num2han","num","parseInt","replace","number","unit","smallUnit","result","unitCnt","Math","ceil","length","array","padStart","match","i","hanValue","_makeHan","unshift","text","str","join","App","useState","useQuarterlyMoney","setUseQuarterlyMoney","useQuarterlyMoneyKr","setUseQuarterlyMoneyKr","useMoney","setUseMoney","useMoneyKr","setUseMoneyKr","useGetMoney","setuseGetMoney","useGetMoneyKr","setuseGetMoneyKr","maxGetMoney","setMaxGetMoney","maxGetMoneyKr","setMaxGetMoneyKr","calcGetMoney","_useMoney","_useQuarterlyMoney","toFixed","name","layout","initialValues","remember","onFinish","values","console","log","onFinishFailed","errorInfo","autoComplete","Item","label","prefix","type","value","onChange","e","currentTarget","calcMaxMoney","style","color","marginLeft","disabled","Title","ReactDOM","render","StrictMode","level","margin","textAlign","span","document","getElementById"],"mappings":"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","file":"static/js/main.0a295b03.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Form, Input, Typography } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst { Text } = Typography;\n\nconst num2han = (num) => {\n  num = parseInt((num + '').replace(/[^0-9]/g, ''), 10) + ''; // 숫자/문자/돈 을 숫자만 있는 문자열로 변환\n  if (num === '0') return '영';\n  var number = ['영', '일', '이', '삼', '사', '오', '육', '칠', '팔', '구'];\n  var unit = ['', '만', '억', '조'];\n  var smallUnit = ['천', '백', '십', ''];\n  var result = []; //변환된 값을 저장할 배열\n  var unitCnt = Math.ceil(num.length / 4); //단위 갯수. 숫자 10000은 일단위와 만단위 2개이다.\n  num = num.padStart(unitCnt * 4, '0'); //4자리 값이 되도록 0을 채운다\n  var regexp = /[\\w\\W]{4}/g; //4자리 단위로 숫자 분리\n  var array = num.match(regexp);\n  //낮은 자릿수에서 높은 자릿수 순으로 값을 만든다(그래야 자릿수 계산이 편하다)\n  for (var i = array.length - 1, unitCnt = 0; i >= 0; i--, unitCnt++) {\n    var hanValue = _makeHan(array[i]); //한글로 변환된 숫자\n    if (hanValue === '')\n      //값이 없을땐 해당 단위의 값이 모두 0이란 뜻.\n      continue;\n    result.unshift(hanValue + unit[unitCnt]); //unshift는 항상 배열의 앞에 넣는다.\n  }\n  //여기로 들어오는 값은 무조건 네자리이다. 1234 -> 일천이백삼십사\n  function _makeHan(text) {\n    var str = '';\n    for (var i = 0; i < text.length; i++) {\n      var num = text[i];\n      if (num === '0')\n        //0은 읽지 않는다\n        continue;\n      str += number[num] + smallUnit[i];\n    }\n    return str;\n  }\n  return result.join('');\n};\n\nconst App = () => {\n  const [useQuarterlyMoney, setUseQuarterlyMoney] = useState();\n  const [useQuarterlyMoneyKr, setUseQuarterlyMoneyKr] = useState('');\n  const [useMoney, setUseMoney] = useState();\n  const [useMoneyKr, setUseMoneyKr] = useState('');\n  const [useGetMoney, setuseGetMoney] = useState();\n  const [useGetMoneyKr, setuseGetMoneyKr] = useState('');\n  const [maxGetMoney, setMaxGetMoney] = useState();\n  const [maxGetMoneyKr, setMaxGetMoneyKr] = useState('');\n\n  const calcGetMoney = (_useMoney, _useQuarterlyMoney) => {\n    const calcGetMoney = ((_useMoney - (_useQuarterlyMoney * 1.03)) * 0.1).toFixed(0);\n    if(calcGetMoney > 0) {\n      if(calcGetMoney > 100_000) {\n        setuseGetMoney(100_000);\n        setuseGetMoneyKr(num2han(100_000));\n      } else {\n        setuseGetMoney(calcGetMoney);\n        setuseGetMoneyKr(num2han(calcGetMoney));\n      }\n    } else {\n      setuseGetMoney(0);\n      setuseGetMoneyKr('');\n    }\n  }\n  const onChangeUseMoney = (e) => {\n    setUseMoney(e.currentTarget.value);\n    setUseMoneyKr(num2han(e.currentTarget.value));\n    calcGetMoney(e.currentTarget.value, useQuarterlyMoney);\n  };\n\n  const onChangeUseQuarterlyMoney = (e) => {\n    setUseQuarterlyMoney(e.currentTarget.value);\n    setUseQuarterlyMoneyKr(num2han(e.currentTarget.value));\n    calcGetMoney(useMoney, e.currentTarget.value);\n    if (e.currentTarget.value > 0) {\n      const calcMaxMoney = (e.currentTarget.value * 1.03 + 1_000_000).toFixed(0);\n      setMaxGetMoney(calcMaxMoney);\n      setMaxGetMoneyKr(num2han(calcMaxMoney));\n    } else {\n      setMaxGetMoney();\n      setMaxGetMoneyKr(num2han(0));\n    }\n  };\n\n  const onFinish = (values) => {\n    console.log('Success:', values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <>\n      <Form\n        name=\"basic\"\n        layout=\"vertical\"\n        initialValues={{\n          remember: true,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"2분기 사용금액\"\n        >\n          <Input\n            prefix=\"₩\"\n            type=\"number\"\n            value={useQuarterlyMoney}\n            onChange={onChangeUseQuarterlyMoney}\n          />\n          <Text style={{ color: 'gray', marginLeft: 15 }}>\n            {useQuarterlyMoney > 0 ? `${useQuarterlyMoneyKr}원` : '원'}\n          </Text>\n        </Form.Item>\n        <Form.Item\n          label=\"현재 사용금액\"\n        >\n          <Input\n            prefix=\"₩\"\n            type=\"number\"\n            value={useMoney}\n            onChange={onChangeUseMoney}\n          />\n          <Text style={{ color: 'gray', marginLeft: 15 }}>\n            {useMoney > 0 ? `${useMoneyKr}원` : '원'}\n          </Text>\n        </Form.Item>\n        <Form.Item\n          label=\"수령 가능금액\"\n        >\n          <Input\n            prefix=\"₩\"\n            type=\"number\"\n            disabled={true}\n            value={useGetMoney}\n          />\n          <Text style={{ color: 'gray', marginLeft: 15 }}>\n            {useGetMoney > 0 ? `${useGetMoneyKr}원` : '원'}\n          </Text>\n        </Form.Item>\n        <Form.Item\n          label=\"지원금 최대 수령 가능금액\"\n        >\n          <Input\n            prefix=\"₩\"\n            type=\"number\"\n            disabled={true}\n            value={maxGetMoney}\n          />\n          <Text style={{ color: 'gray', marginLeft: 15 }}>\n            {maxGetMoney > 0 ? `${maxGetMoneyKr}원` : '원'}\n          </Text>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Row, Col, Typography } from 'antd'\nconst { Title } = Typography;\nReactDOM.render(\n  <React.StrictMode>\n    <Title level={2} style={{margin:30, textAlign:'center'}}>얼마나 써야 되는거야?</Title>\n    <Row>\n      <Col span={12} style={{margin:'0 auto'}}>\n        <App />\n      </Col>\n    </Row>\n    <Title level={5} style={{margin:30, textAlign:'center', color:'red'}}>*실제 금액과 차이가 있을 수 있습니다.*</Title>l\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}